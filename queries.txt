Selezionare tutti gli eventi gratis, cioè con prezzo nullo (19)

SELECT * FROM `events` WHERE `price` IS NULL;

Selezionare tutte le location in ordine alfabetico (82)

SELECT * FROM `locations` ORDER BY `name` ASC;

Selezionare tutti gli eventi che costano meno di 20 euro e durano meno di 3 ore (38)

SELECT * FROM `events` WHERE `duration` < '03:00:00' AND `price` < 20;

Selezionare tutti gli eventi di dicembre 2023 (25)

SELECT * FROM `events` WHERE `start` LIKE '2023-12-%';

Selezionare tutti gli eventi con una durata maggiore alle 2 ore (823)

SELECT * FROM `events` WHERE `duration` > '02:00:00'; result(946)

Selezionare tutti gli eventi, mostrando nome, data di inizio, ora di inizio, ora di fine e durata totale (1040)

SELECT `name`, DATE(`start`) AS 'start_date', TIME(`start`) AS 'start_time', TIME(ADDTIME(`start`, `duration`)) AS 'end_time', `duration` FROM `events`;

Selezionare tutti gli eventi aggiunti da “Fabiano Lombardo” (id: 1202) (132)

SELECT * FROM `events` WHERE `user_id` = 1202;

Selezionare il numero totale di eventi per ogni fascia di prezzo (81)

SELECT `price`, COUNT(*) FROM `events` GROUP BY `price`;

Selezionare tutti gli utenti admin ed editor (9)

SELECT * FROM `users` WHERE `role_id` = 1 OR `role_id` = 2;

SELECT * FROM `users` INNER JOIN `roles` ON `roles`.`id` = `users`.`role_id` WHERE `roles`.`name` = 'Admin' OR `roles`.`name` = 'Editor';

Selezionare tutti i concerti (eventi con il tag “concerti”) (72)

SELECT * FROM `events` INNER JOIN `event_tag` ON `event_tag`.`event_id` = `events`.`id` INNER JOIN `tags` ON `tags`.`id` = `event_tag`.`tag_id` WHERE `tags`.`name` = 'Concerti';

Selezionare tutti i tag e il prezzo medio degli eventi a loro collegati (11)

SELECT `tags`.`name`, AVG(`price`) AS 'average_price' FROM `tags` INNER JOIN `event_tag` ON `event_tag`.`tag_id` = `tags`.`id` INNER JOIN `events` ON `events`.`id` = `event_tag`.`event_id` GROUP BY `tags`.`name`;

Selezionare tutte le location e mostrare quanti eventi si sono tenute in ognuna di esse (82)

SELECT `locations`.`name`, COUNT(`events`.`id`) AS 'events_number' FROM `events` INNER JOIN `locations` ON `locations`.`id` = `events`.`location_id` GROUP BY `locations`.`name`;

Selezionare tutti i partecipanti per l’evento “Concerto Classico Serale” (slug: concerto-classico-serale, id: 34) (30)

SELECT * FROM `events` INNER JOIN `bookings` ON `bookings`.`event_id` = `events`.`id` INNER JOIN `users` ON `users`.`id` = `bookings`.`user_id` WHERE `events`.`name` = 'Concerto Classico Serale';

Selezionare tutti i partecipanti all’evento “Festival Jazz Estivo” (slug: festival-jazz-estivo, id: 2) specificando nome e cognome (13)

SELECT `users`.`first_name`, `users`.`last_name` FROM `users` INNER JOIN `bookings` ON `bookings`.`user_id` = `users`.`id` INNER JOIN `events` ON `events`.`id` = `bookings`.`event_id` WHERE `events`.`slug` = 'festival-jazz-estivo';

Selezionare tutti gli eventi sold out (dove il totale delle prenotazioni è uguale ai biglietti totali per l’evento) (18)

SELECT `events`.`id`, `events`.`name`, `events`.`total_tickets`, COUNT(`bookings`.`event_id`) AS 'tickets_sold' FROM `events` INNER JOIN `bookings` ON `bookings`.`event_id` = `events`.`id` GROUP BY `events`.`id` HAVING `events`.`total_tickets` = `tickets_sold`;

Selezionare tutte le location in ordine per chi ha ospitato più eventi (82)

SELECT `locations`.`id`, `locations`.`name`, COUNT(`events`.`location_id`) AS 'events_number' FROM `locations` INNER JOIN `events` ON `events`.`location_id` = `locations`.`id` GROUP BY `events`.`location_id` ORDER BY `events_number` DESC;

Selezionare tutti gli utenti che si sono prenotati a più di 70 eventi (74) -NOT WORKING!-

SELECT `users`.`id`, `users`.`first_name` COUNT(`bookings`.`user_id`) AS 'tickets_bought'
FROM `users`
INNER JOIN `bookings`
ON `bookings`.`user_id` = `users`.`id`
GROUP BY `users`.`id`
WHERE `tickets_bought` > 70;

Selezionare tutti gli eventi, mostrando il nome dell’evento, il nome della location, il numero di prenotazioni e il totale di biglietti ancora disponibili per l’evento (1040)

SELECT `events`.`id`, `events`.`name`, `locations`.`name` AS 'location', COUNT(`bookings`.`event_id`) AS 'sold_tickets', (`events`.`total_tickets` - COUNT(`bookings`.`event_id`)) AS 'remaning_tickets' FROM `events` INNER JOIN `locations` ON `locations`.`id` = `events`.`location_id` INNER JOIN `bookings` ON `bookings`.`event_id` = `events`.`id` GROUP BY `events`.`id`;